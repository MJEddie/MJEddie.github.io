{"pages":[],"posts":[{"title":"Command Line 常用指令","text":"Command Line 是什麼？Command-Line Interface（命令列介面，簡稱CLI）是在圖形使用者介面得到普及之前使用最為廣泛的使用者介面，它通常不支援滑鼠，用戶通過鍵盤輸入指令，電腦接收到指令後，予以執行。也有人稱之為文字使用者介面（character user interface, CUI） Command Line 基本指令 pwd：print working directory，印出現在資料夾位置 ls：list contents，列出資料夾內所有檔案 ls -l：列出詳細資訊 ls -a：可以看到隱藏的檔案 ls -al:列出詳細資訊，包含隱藏檔案 ls -R：可以看到所有的子目錄，較少用 可以看到 ls -l 中列出的資訊中包含擁有者、權限以及上次修改時間 cd：change directory，切換資料夾 cd ..：上層資料夾 cd ../..：上上層資料夾 指令練習 mkdir：make directory，建立資料夾 指令練習，可以看到新增了一個 “practice” 資料夾 touch：新增檔案，如果輸入的檔案存在則會修改檔案時間 指令練習，進入剛新增的資料夾，新增一個 “index.html” 的檔案 cp：copy，複製檔案 指令練習，複製 “index.html” 為 “about.html” mv：move，移動檔案，或是重新命名檔案名稱 指令練習，移動 “about.html” 到上一層 “Music” 資料夾中 cd 可使用相對路徑或是絕對路徑，要將檔案移動到上一層時必須使用絕對路徑 將剛移動過來的 “about.html” 重新命名為 “index.html” rm：remove，刪除檔案 rmdir，刪除資料夾 rm -rf，強制刪除檔案，小心使用 指令練習，將剛新增的 “practice” 資料夾刪除 cat：查看檔案內容 可以看到 “about.html” 裡的內容為 “Hello” 原本 about.html 裡是沒有東西，先用 vim 指令編輯 about.html更多 vim 的操作可以參考 簡明 Vim 文字編輯器操作入門教學 學習資料Linux Command","link":"/2020/11/20/Command-Line%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"},{"title":"Hexo Blog 架設","text":"前言第一篇文章來記錄一下 Hexo Blog 的架設過程，也是參考了很多資料才寫出來的，如果有錯誤的地方還請不吝指教。 安裝需求在安裝 HEXO 前我們要先確認電腦已經安裝好 Node.js 跟 Git ，因為 Hexo 是基於 Node.js 的開發套件，所以要使用前必須要先安裝 NPM(Node Package Manager) ， Git 則是為了能夠在 GitHub 上架設網站的伺服器，還沒安裝的話到官網下載安裝即可。 安裝 HEXO確認 Node.js &amp; Git 安裝好之後，終端機輸入: $ npm install hexo-cli -g (完成後用 hexo v 指令確認是否安裝成功，有出現版本號就完成安裝) $ hexo init blog $ cd blog $ npm install $ hexo server or $ hexo s 設定 HEXO_config.yml網站配置檔案，可以修改大部分的設定，像是標題、敘述、支援語言、主題等。 themes網站主題放置的資料夾，官網有提供許多主題供使用。 第一篇文章輸入指令 $ hexo new &lt;title&gt; 後在source/_posts 中將看到 “ 佈署上 GitHub修改 _config.yml 12deploy: type: git 安裝 hexo-deployer-git 1$ npm install hexo-deployer-git --save 修改 _config.yml 1234deploy: type: git repo: https://github.com/&lt;yourAccount&gt;/&lt;repo&gt; branch: &lt;your branch&gt; 執行 hexo deploy -g 就可以將網站佈署到 GitHub上。接著輸入 &lt;yourAccount&gt;.github.io就能看到自己的網站囉。","link":"/2020/11/16/Hexo-Blog/"},{"title":"[JavaScript] - Date() 日期與時間","text":"JavaScript 沒有日期資料型態，但是它有提供 Date() 物件，使用內件的日期物件與方法、可以取得與操作日期時間。Date() 物件是基於世界標準時間（UTC） 1970 年 1 月 1 日開始的毫秒數值來儲存時間。 Date() 的創建Date() 物件有四種可在建構式傳入參數的類型如下 不帶參數 : 表示當前日期和時間1new Date() // Tue Jan 19 2021 20:28:00 GMT+0800 (台北標準時間) 時間單位 : 必要參數 : 年、月 年 (四位數) 月 (從 0~11，分別代表一月到十二月) 選擇性參數 : 日、時、分、秒、毫秒 日 (預設為 1) 時、分、秒、毫秒 (預設為 0) 1new Date(2021,0) // Fri Jan 01 2021 00:00:00 GMT+0800 (台北標準時間) milliseconds : 表示從 1970-01-01 00:00:00 UTC+0 開始所經過的毫秒數123new Date(0) // Thu Jan 01 1970 08:00:00 GMT+0800 (台北標準時間)// 增加一年new Date(365 * 24 * 60 * 60 * 1000) // Fri Jan 01 1971 08:00:00 GMT+0800 (台北標準時間) date string : dataString 為表示時間日期的字串，要符合 ISO8601 或 國際標準 RFC2822 的格式 1new Date('2021/01/01') // Fri Jan 01 2021 00:00:00 GMT+0800 (台北標準時間) Date() 的方法取得時間new Date() 不加任何參數就會使用瀏覽器環境來取得目前的日期時間 1const timeNow = const new Date(); // Tue Jan 19 2021 20:28:00 GMT+0800 (台北標準時間) 取得日期時間的某個值我們用 new Date()取得時間後，可以只取其中的某個值，像是年、月、日等。 12345const timeNow = const new Date(); // Tue Jan 19 2021 20:28:00 GMT+0800 (台北標準時間)timeNow.getFullYear() // 2021timeNow.getMonth() // 0timeNow.getDate() // 19timeNow.getDay() // 2 getFullYear(): 取得西元年，為四位數字 getMonth(): 取得月份的值，範圍 0~11 getDate(): 取得日期的值，範圍 1~31 getDay(): 取得星期的值，範圍 0~6 其中我們會發現 getMonth()、getDay() 回傳的其實是陣列索引值，其中星期是從禮拜日作為一週的第一天。以下是其他取得時間的方法。 方法 敘述 getFullYear() 從 Date 物件返回年份 ( 四位數字 ) getMonth() 從 Date 物件返回月份 (0 ~ 11) getDate() 從 Date 物件返回一個月中的某一天 (1 ~ 31) getHours() 返回 Date 物件的小時 (0 ~ 23) getMinutes() 返回 Date 物件的分鐘 (0 ~ 59) getSeconds() 返回 Date 物件的秒數 (0 ~ 59) getMilliseconds() 返回 Date 物件的毫秒(0 ~ 999) getTime() 返回 1970 年 1 月 1 日至今的毫秒數 getDay() 從 Date 物件返回一週中的某一天 (0 ~ 6) 設置時間從 MDN文件 中我們知道以下幾種設置時間的方式，時間為 1995/12/17 03:24:00，如果沒特別指定的話預設是 0。 12345var today = new Date();var birthday = new Date('December 17, 1995 03:24:00');var birthday = new Date('1995-12-17T03:24:00');var birthday = new Date(1995, 11, 17); // Sun Dec 17 1995 00:00:00 GMT+0800 (台北標準時間)var birthday = new Date(1995, 11, 17, 3, 24, 0); 下面是其他設定的方法，所以方法都可以使用正負整數或是 0，假如超過設定範圍則會自動加減做進位，用剛剛的例子說明，把月份的參數設定為 12 ( 範圍 0~11)，那麼時間會變成 1996/1/17 03:24:00。 1var birthday = new Date(1995, 12, 17, 3, 24, 0); // Wed Jan 17 1996 03:24:00 GMT+0800 (台北標準時間) 這次我們把小時換成 -2 來看看會發生什麼事，會發現時間變成前一天的 22:24:00，別忘了取得時間時回傳的是陣列索引值，所以我們設定 -2 也就是陣列中倒數第二個值，也就是 22 啦。 1var birthday = new Date(1995, 12, 17, -2, 24, 0); // Tue Jan 16 1996 22:24:00 GMT+0800 (台北標準時間) 方法 敘述 setFullYear() 從 Date 物件返回年份 ( 四位數字 ) setMonth() 從 Date 物件返回月份 (0 ~ 11) setDate() 從 Date 物件返回一個月中的某一天 (1 ~ 31) setHours() 返回 Date 物件的小時 (0 ~ 23) setMinutes() 返回 Date 物件的分鐘 (0 ~ 59) setSeconds() 返回 Date 物件的秒數 (0 ~ 59) setMilliseconds() 返回 Date 物件的毫秒(0 ~ 999) setTime() 返回 1970 年 1 月 1 日至今的毫秒數 時間的比較Date() 物件可以用 &gt;, &lt;, &lt;=, &gt;=, &lt;== 或 &gt;== 運算子來比較兩個 Date() 物件，日期越晚的越大 12345678910const today = new Date();const someday = new Date('2022/1/1');if (someday &gt; today) { console.log('Today is before 2022/1/1');} else { console.log('Today is after 2022/1/1');}// Today is before 2022/1/1 但如果要比較兩個日期是否相等，運算子 == != === !==，要先將 Date() 物件用 date.getTime() 轉換為數值型態才能比較 12345const d1 = new Date(2022, 1, 1);const d2 = new Date(2022, 1, 1);const same = d1.getTime() === d2.getTime(); // trueconst notSame = d1.getTime() !== d2.getTime(); // false 參考資料 JavaScript Date Objects MDN Date","link":"/2020/12/26/JavaScript-Date/"},{"title":"Git &amp; Github 入門","text":"Git 是什麼？一種分散式版本控制系統 (Distributed Version Control Systems)，可藉由它產生一個數據庫 (repository)，並且做到分散式版本控制。由於可在多處放置同一份程式碼、歷史紀錄追蹤與回朔，讓協同開發變得容易。 Git 和 GitHub 的差異git 是一套軟體系統，而 GitHub 則是運用 git 提供程式原始碼版本控制與代管服務的服務平台。 Git 安裝Git 軟體安裝 Git 版本控制基本觀念 Git 常用指令 初始化數據庫： git init 查詢當前狀態：git status 將檔案加入到索引：git add . 將索引檔案變成一個更新(commit)：git commit -m &quot;修改內容&quot; 觀察 commit 歷史紀錄： git log 下載遠端數據庫： git clone 數據庫網址 更新遠端數據庫： git push origin master GitHub 專案建立申請完 Github 帳號後點選右上角來新增 new repository 這邊輸入專案的名稱 專案建立之後如果是全新開始，請依「create a new repository on the command line」的指示進行；如果是要上傳現存專案，則依照「push an existing repository from the command line」指示進行。 GitHub page 實作進入到專案資料夾，git status 確認資料夾內的狀態，可以看到 index.html 跟 css 資料夾裡的 main.css 檔案還未加入索引 這邊我用舊有專案示範，有先修改內容，所以索引內還沒有修改後的 index.html 跟 main.css 把修改後的 index.html 和 main.css 用 git add 指令加入索引中，再次確認 git 狀態，可以看到檔案顏色變成綠色，代表已經加入 接著 git commit -m &quot;2020style&quot; 加入到本地數據庫，並註解 “2020style” 再來用 git branch gh-page 來新增名為 gh-page 的分支，之後用 git branch 來確認是否新增成功，成功的話可以看到我們現在有兩個分支 輸入 git checkout gh-page 切換到 gh-page 分支 輸入 git push將本地的檔案 push 到 GitHub 上，但是 GitHub 還沒有這個分支，所以會提示我們要輸入以下指令來完成 git push --set-upstream origin gh-pages 接下來在 GitHub 頁面上可以看到分支建立成功 剛剛新增的檔案也在分支內 之後就可以透過網址來瀏覽我們的靜態網頁https://mjeddie.github.io/RootsSkate/ 參考資料Git 官方教學文件 Git 與 Github 是什麼？如何使用 Git？ 延伸閱讀5xruby - 為你自己學 Git ihower 的 Git 教室 保哥 - 30 天精通 Git 版本控管 連猴子都能懂得 Git 入門教學","link":"/2020/11/21/Git%E5%85%A5%E9%96%80/"},{"title":"[JavaScript] - Form Validator","text":"成品From Validator 介紹JavaScript 可用來在資料被送往伺服器前對 HTML 表單中的這些輸入資料進行驗證，算是很常看到的功能，紀錄一下實作的練習。 功能 檢查必填項目，空白則顯示 xxx is required 檢查字元長度 ( 使用者名稱 315 個字元、密碼 816 個字元) 驗證 email 格式，不符合的話顯示 Email is not valid 確認密碼是否正確 輸入時能立刻判斷是否符合格式 HTML 架構h2 文字搭配表單格式，&lt;label&gt; 元素透過 for 屬性與 &lt;input&gt; 元素的 id 屬性連結，&lt;small&gt; 標籤則用來放置我們要呈現的錯誤訊息。 123456789101112&lt;form id=&quot;form&quot; class=&quot;form&quot;&gt; &lt;h2&gt;Register With Us&lt;/h2&gt; &lt;div class=&quot;form-control&quot;&gt; &lt;label for=&quot;username&quot;&gt;Username&lt;/label&gt; &lt;input type=&quot;text&quot; id=&quot;username&quot; placeholder=&quot;Enter username&quot; /&gt; &lt;small&gt;&lt;!-- error message --&gt;&lt;/small&gt; &lt;/div&gt; &lt;div class=&quot; form-control &quot;&gt;Email...&lt;/div&gt; &lt;div class=&quot; form-control &quot;&gt;Password...&lt;/div&gt; &lt;div class=&quot; form-control &quot;&gt;Confirm Password...&lt;/div&gt; &lt;button type=&quot;submit&quot;&gt;Submit&lt;/button&gt;&lt;/form&gt; 檢查必填項目宣告變數，利用 getElementById() 來取得 HTML 內的元素 12345const form = document.getElementById('form');const username = document.getElementById('username');const email = document.getElementById('email');const password = document.getElementById('password');const password2 = document.getElementById('password2'); 我們希望註冊失敗時則顯示紅色，並且把錯誤訊息顯示出來，成功時則顯示綠色，所以分別建立代表失敗跟成功的顯示函式，用 JavaScript 去切換 class 的名稱，以達到我們想要的功能。 12345678910111213// Show input error messagefunction showError(input, message) { const formControl = input.parentElement; formControl.classList.add('error'); const small = formControl.querySelector('small'); small.innerText = message;}// Show success outlinefunction showSuccess(input) { const formControl = input.parentElement; formControl.classList.add('success');} 檢查必填項目，針對傳入的陣列中每一個元素去檢查，若沒有填寫會顯示 xxx is required。 .trim() 函數用於去除字符串兩端的空白字符 12345678910// Check required fieldsfunction checkRequired(inputArr) { inputArr.forEach(function(input) { if (input.value.trim() === '') { showError(input, `${getFieldName(input)} is required`); } else { showSuccess(input); } });} 其中我們想要讓顯示的第一個英文字母為大寫，所以用另一個函式getFieldName 來處理 取得第一個字母：charAt(0) 轉換成大寫：toUpperCase() 用 slice(1) 得到一個去掉字首的字串並和之前轉換的大寫字母相加 1234// Get fieldnamefunction getFieldName(input) { return input.id.charAt(0).toUpperCase() + input.id.slice(1);} 檢查字元長度用 .length 取得輸入的值去判斷長度，若是不符合我們的設定 (使用者名稱 315 個字元、密碼 816 個字元)呼叫 showError 並顯示錯誤訊息，符合則呼叫 showSucces。 12345678910// Check input lengthfunction checkLength(input, min, max) { if (input.value.length &lt; min &amp;&amp; input.value.trim() !== '') { showError(input, `${getFieldName(input)} must be at least ${min} characters`); } else if (input.value.length &gt; max) { showError(input, `${getFieldName(input)} must be less than ${max} characters`); } else { showSuccess(input); }} 驗證 email 格式把輸入值用 test() 是否與 Email 格式驗證的正規表達式匹配，相符呼叫 showSucces 不符合則呼叫 showError 並顯示錯誤訊息 Email is not valid。 1234567891011/// Check email is validfunction checkEmail(input) { const re = /^(([^&lt;&gt;()[\\]\\\\.,;:\\s@&quot;]+(\\.[^&lt;&gt;()[\\]\\\\.,;:\\s@&quot;]+)*)|(&quot;.+&quot;))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/; if (re.test(input.value.trim())) { showSuccess(input); } else if (input.value.trim() === '') { showError(input, `${getFieldName(input)} is required`); } else { showError(input, 'Email is not valid'); }} 確認密碼是否正確很簡單的對兩個值進行判斷，不相等則呼叫 showError 並顯示錯誤訊息 Passwords do not match。 123456// Check passwords matchfunction checkPasswordMatch(input1, input2) { if (input1.value !== input2.value) { showError(input2, 'Passwords do not match'); }} 輸入時能立刻判斷是否符合格式對我們的 input 做監聽，接著呼叫我們的判斷函式判斷是否符合格式，使用正則表達式來建立我們的規則，使用 test 對我們輸入的字串判斷是否符合正則表達式的規則，然後切換 class 名稱顯示符合或不符合，不符合則會額外顯示錯誤訊息。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556form.addEventListener('input', validate);function validate(e) { const target = e.target; switch (target.id) { case 'username': const userRegex = /^[a-zA-Z0-9]{3,15}$/; if (userRegex.test(target.value.trim())) { target.parentElement.classList.add('success'); target.parentElement.classList.remove('error'); } else { target.parentElement.classList.add('error'); target.parentElement.classList.remove('success'); showError(target, 'must be at least 3 characters'); } break; case 'email': if (target.id == &quot;email&quot;) { const emailRegex = /^(([^&lt;&gt;()[\\]\\\\.,;:\\s@&quot;]+(\\.[^&lt;&gt;()[\\]\\\\.,;:\\s@&quot;]+)*)|(&quot;.+&quot;))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/; if (emailRegex.test(target.value.trim())) { target.parentElement.classList.add('success'); target.parentElement.classList.remove('error'); } else { target.parentElement.classList.add('error'); target.parentElement.classList.remove('success'); showError(target, 'Email is not valid'); } } break; case 'password': const pwdRegex = /(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&amp;*-]).{8,16}$/; if (pwdRegex.test(target.value.trim())) { target.parentElement.classList.add('success'); target.parentElement.classList.remove('error'); } else { target.parentElement.classList.add('error'); target.parentElement.classList.remove('success'); showError(target, 'must be at least 8 characters'); } break; case 'password2': const pwd2Regex = /(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&amp;*-]).{8,16}$/; const pwd = document.querySelector('#password'); const pwd2 = document.querySelector('#password2'); if (pwd.value === pwd2.value) { target.parentElement.classList.add('success'); target.parentElement.classList.remove('error'); } else { target.parentElement.classList.add('error'); target.parentElement.classList.remove('success'); showError(target, 'Passwords do not match'); } break; }}","link":"/2020/12/29/JavaScript-FormValidator/"},{"title":"[JavaScript] - Math() 函數的使用","text":"紀錄內建的 Math() 屬性和方法，可以 console.dir(Math) 查看 Math() 的所有函數方法。 Math() 的屬性 這邊所列的屬性可以直接呼叫它 12Math.LN2 // 0.6931471805599453Math.SQRR2 // 1.4142135623730951 Math() 的方法 這邊舉幾個常用的方法 Math.abs() 取絕對值 1Math.abs(-21) // 21 Math.random() 取 0~1 的隨機小數 123Math.random() // 0.17817644947082445Math.random() // 0.1376729897557134Math.random() // 0.6986859722517493 Math.celi() 取大於這個數的最小整數 12Math.ceil(6.6) // 7Math.ceil(-6.6) // -6 Math.floor() 取小於這個數的最大整數 123Math.floor(3.14) // 3Math.floor(6.6) // 6Math.floor(-6.6) // -7 Math.round() 四捨五入 123Math.round(3.14) // 3Math.floor(6.6) // 7Math.floor(-6.6) // -7 進階應用 取陣列中隨機的值 1Math.floor(Math.random() * arr.length) 參考資料 JavaScript Math 對象","link":"/2020/12/25/JavaScript-Math/"},{"title":"[JavaScript] - Exchange Rate Calculate","text":"成品Exchange Rate Calculate 介紹串接 API 並用 jQuery 語法做的匯率轉換器練習。 功能 可選擇貨幣，並顯示匯率 選擇貨幣與金額後，轉換出對應的金額 可以快速交換兩種貨幣 HTML 架構使用 &lt;select&gt; option 標籤做出下拉選單的樣式，每個選項中 value 為其代表的貨幣， currency-one 為我們選擇的貨幣，currency-two 則是我們想要兌換的貨幣，中間有 Swap 按鈕可以快速交換兩個貨幣的匯率。 12345678910111213141516171819202122232425262728&lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;currency&quot;&gt; &lt;select id=&quot;currency-one&quot;&gt; &lt;option value=&quot;AED&quot;&gt;AED&lt;/option&gt; &lt;option value=&quot;ARS&quot;&gt;ARS&lt;/option&gt; &lt;option&gt;...&lt;/option&gt; &lt;option&gt;...&lt;/option&gt; &lt;/select&gt; &lt;input type=&quot;number&quot; id=&quot;amount-one&quot; placeholder=&quot;0&quot; value=&quot;1&quot; /&gt; &lt;/div&gt; &lt;div class=&quot;swap-rate-container&quot;&gt; &lt;button class=&quot;btn&quot; id=&quot;swap&quot;&gt; Swap &lt;/button&gt; &lt;div class=&quot;rate&quot; id=&quot;rate&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;currency&quot;&gt; &lt;select id=&quot;currency-two&quot;&gt; &lt;option value=&quot;AED&quot;&gt;AED&lt;/option&gt; &lt;option value=&quot;ARS&quot;&gt;ARS&lt;/option&gt; &lt;option&gt;...&lt;/option&gt; &lt;option&gt;...&lt;/option&gt; &lt;/select&gt; &lt;input type=&quot;number&quot; id=&quot;amount-two&quot; placeholder=&quot;0&quot;/&gt; &lt;/div&gt;&lt;/div&gt; 匯率計算使用 fetch() 來取得遠端各個貨幣對應其他貨幣的兌換率，then() 做為下一步，資料取得後可在 then() 裡面接收，因為檔案為 json 格式，所以在取得檔案後透過 json() 處理檔案，接著傳遞到下一層，就可以顯示出匯率以及兌換後的金額。 123456789101112131415function calculate() { const currencyOne = $('#currency-one').val(); const currencyTwo = $('#currency-two').val(); fetch(`https://api.exchangerate-api.com/v4/latest/${currencyOne}`) .then(res =&gt; res.json()) .then(data =&gt; { // console.log(data); const rate = data.rates[currencyTwo]; $('#rate').text(`1 ${currencyOne} = ${rate} ${currencyTwo}`); $('#amount-two').val(($('#amount-one').val() * rate).toFixed(2)); });} 事件監聽當我們改變兌換的金額或是貨幣時，可以做到即時的顯示，對此我們需要監聽選擇的貨幣以及輸入的金額，並在其值改變時再次呼叫函式做匯率的計算，已達到即時顯示的功能。 123456789$('#currency-one').change(function() { calculate();});$('#currency-two').change(function() { calculate();});$('#amount-one').change(function() { calculate();}); 交換貨幣點擊 Swap 按鈕時把要選擇的貨幣 ( 貨幣 1) 與想要兌換的貨幣( 貨幣 2)做交換，交換完再次呼叫函式計算兌換的金額。 把貨幣 1 的匯率存到變數 temp 貨幣 2 的匯率改為貨幣 1 的匯率 再把原本 temp 中貨幣 1 的匯率存到貨幣 2 再次呼叫函式計算兌換的金額 123456$('#swap').click(function() { const temp = $('#currency-one').val(); $('#currency-one').val($('#currency-two').val()); $('#currency-two').val(temp); calculate();}) 參考資料 Fetch API Fetch Response","link":"/2021/01/05/JavaScript-ExchangeRateCalculate/"},{"title":"[JavaScript] - New Year Countdown","text":"成品New Year Countdown 介紹參考 JavaScript 30 中 Countdown Timer 的練習，利用 Date() 物件做的練習。 功能倒數現在離元旦剩餘的時間，主要處理可以分為以下幾個部分 設置倒數時間 計算剩餘時間 顯示時間 倒數與停止倒數 設置倒數時間因為是做跨年倒數，所以先用 getFullYear() 取得現在年份，再設置倒數時間，如果是做限時的倒數器直接設置倒數時間即可 12const currentYear = new Date().getFullYear(); const countDownDate = new Date(`January 01 ${currentYear + 1} 00:00:00`) 計算剩餘時間再來我們要計算剩餘時間，用 newDate() 取得現在時間，然後把倒數時間跟現在時間相減取得剩餘時間，然後把得到的時間 (millisecond) 轉換成天數、小時、分鐘跟秒。 把得到的豪秒數轉換成秒：result / 1000 將總秒數除以 60 取餘數，就是計算完分鐘術後剩下的秒數：(result / 1000) % 60 用 Math.floor 取最大整數：Math.floor(result / 1000) % 60 分鐘、小時、天數一樣的邏輯 宣告變數，利用 getElementById() 來取得 HTML 內的元素 1234const seconds = document.getElementById(&quot;seconds&quot;);const minutes = document.getElementById(&quot;minutes&quot;);const hours = document.getElementById(&quot;hours&quot;);const days = document.getElementById(&quot;days&quot;); 計算部分 1234567891011121314function remainTime() { const timeNow = new Date(); const result = countDownDate - timeNow; const s = Math.floor(result / 1000) % 60; const m = Math.floor(result / 1000 / 60) % 60; const h = Math.floor(result / 1000 / 60 / 60) % 24; const d = Math.floor(result / 1000 / 60 / 60 / 24); seconds.innerHTML = formatTime(s); minutes.innerHTML = formatTime(m); hours.innerHTML = formatTime(h); days.innerHTML = d;} 顯示時間在時間不是雙位數時增加前導零顯示，像是 9 秒時就會顯示 09，在數字小於 10 時於開頭加個字串 0。 123function formatTime(time) { return time &lt; 10 ? `0${time}` : time;} 倒數與停止倒數使用 setInterval 、 clearInterval 方法來實現倒數與停止倒數，setInterval 每隔一秒呼叫我們的函式，進而達到倒數的功能，當倒數時間到時我們呼叫 clearInterval 來終止倒數的功能。 123456789const intervalId = setInterval(() =&gt; { const result = countDownDate - (new Date()); if (result &lt; 0) { clearInterval(intervalId); } else { remainTime(); } }, 1000);","link":"/2020/12/24/JavaScript-NewYearCountdown/"},{"title":"Markdown語法","text":"Markdown 語法是什麼？ Markdown 是一種輕量級標記式語言，為了實現易讀易寫的特性 Markdown 語法全由標點符號所組成，讓它們看起來就像是所要表達的意思。 因為其易讀易寫的特性，目前許多網站都廣泛使用 Markdown 語法。 一、常用功能 Markdown語法：123456789101112斜體：在兩邊加上 *星號* 或是 _底線_粗體：在兩邊加上 **兩個星號** 或是 __兩個底線__也可以用 **星號 與 _底線_**刪除線：在兩邊加上 ~~兩個波浪~~引言(註解)：&gt; 換行：需在最後面+`兩個空白鍵`·· &gt; 先以··表示空白 顯示結果：斜體：在兩邊加上 星號 或是 底線 粗體：在兩邊加上 兩個星號 或是 兩個底線 也可以用 星號 與 底線 刪除線：在兩邊加上 兩個波浪 引用文字(註解)： 換行：需在最後面+兩個空白鍵··先以··表示空白 二、標題Markdown語法：12345678Markdown 提供了六種規格的，分別對應 Html 標籤中的`&lt;h1&gt; ~ &lt;h6&gt;`# H1## H2### H3#### H4##### H5###### H6 顯示結果：H1H2H3H4H5H6三、清單Markdown 支援無序清單和有序清單，要在清單下加入段落只要 +tab 就好。無序清單可使用星號、加號或是減號作為標記： Markdown語法：123* 無序清單+ 這也是清單- 這還是清單 顯示結果： 無序清單 這也是清單 這還是清單 有序清單則使用數字接一個英文句點： Markdown語法：121. 有序清單１2. 有序清單２ 顯示結果： 有序清單１ 有序清單２ 四、連結Markdown語法：1234567891011* 連結兩邊加上`&lt;` `&gt;`就會產生超連結 &lt;https://images.unsplash.com/photo-1584342864307-03dae979b7db?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=400&amp;q=80&gt; * 名稱兩邊加上`[` `]`然後再連結兩邊加上`(` `)`就可以將連結替換成文字連結 [傳送門](https://images.unsplash.com/photo-1584342864307-03dae979b7db?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=400&amp;q=80) * 將`[` `]`前+`!`，則可以產生圖片 (把滑鼠指向圖片可以看到註解） ![圖片參考名稱](https://images.unsplash.com/photo-1584342864307-03dae979b7db?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=400&amp;q=80 &quot;傳送門&quot;) 顯示結果： 連結兩邊加上&lt; &gt;就會產生超連結 https://images.unsplash.com/photo-1584342864307-03dae979b7db?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=400&amp;q=80 名稱兩邊加上[ ]然後再連結兩邊加上( )就可以將連結替換成文字連結 傳送門 將[ ]前+!，則可以產生圖片 (把滑鼠指向圖片可以看到註解） 五、程式碼123行內的 `程式碼` 用 `反引號` 包起來區塊的 `程式碼` 用 ```三個反引號```包起來記得要加上語言名稱 Markdown語法：12var s = &quot;JavaScript Syntax Highlighter&quot;;alert(s); 12$s = &quot;PHP Syntax Highlighter&quot;;echo $s; 顯示結果：12var s = &quot;JavaScript Syntax Highlighter&quot;;alert(s); 12$s = &quot;PHP Syntax Highlighter&quot;;echo $s; 參考資料Markdown 文件","link":"/2020/11/17/Markdown%E8%AA%9E%E6%B3%95/"},{"title":"[手刻切版] - Personal Resume","text":"看到不少課程都有切個人作品集的頁面，就參考了一些樣本自己來切。 DemoPersonal Resume Intro 網頁介紹這是一個個人作品集的網頁，最上方的 navbar 左側是個人的資訊，右側是文字及超連結跳轉頁面。 Home：由個人頭像、標語以及敘述組成，搭配一個背景色以及個人的社群。 About me：個人學歷、經歷區塊， Portfolio：利用交錯漂浮版面來放置個人作品，一邊是作品的圖示，另一邊說明作品內容。 Contact：分成三個區塊，由 icon、標題以及文字敘述組成。 最後則是footer。 Layout Notes開始前一樣先進行 reset 的動作，將所有的 margin、padding 歸零，並設定 box-sizing:border-box 讓 padding 和 border 的修改不會改變 box model 的大小。 12345678910111213141516* { -webkit-box-sizing: border-box; box-sizing: border-box; margin: 0; padding: 0;}body { font-family: 'Montserrat', sans-serif;}ul { margin: 0; padding-left: 0; list-style: none;} Navbar 左側是標題搭配敘述，右邊則是 ul 包住 li 當作 navbar 的選單，並增加改變顏色的效果，因為使用 float 排版，要分別設定標題跟 選單的浮動方向。 HTML 架構 12345678910111213141516&lt;div id=&quot;header&quot;&gt; &lt;div class=&quot;container clearfix&quot;&gt; &lt;div id=&quot;info&quot;&gt; &lt;h3 class=&quot;name&quot;&gt;&lt;b&gt;Nick &amp;thinsp; &lt;/b&gt;&lt;/h3&gt; &lt;span class=&quot;title&quot;&gt;&amp;frasl; &amp;thinsp; Becoming a Front-End Developer&lt;/span&gt; &lt;/div&gt; &lt;div id=&quot;nav&quot;&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;#header&quot;&gt;home&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#about&quot;&gt;about me&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#portfolios&quot;&gt;portfolio&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#contact&quot;&gt;contact&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt; CSS 部分 1234567891011121314#info { float: left; line-height: 40px;}#nav { float: right; text-transform: uppercase; line-height: 100px;}#nav li { float: left;} Home 接著個人頭像這邊練習用 flex 排版，可以分為背景色的橘色區塊、個人頭像的綠色區塊和標題的藍色區塊，然後把個人頭像的綠色區塊向左偏移達到重疊的效果。個人頭像照片的部分，則是用 border-radius:50% 去切出圓形來。 HTML 架構 123456789101112131415161718192021222324&lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;bg&quot;&gt;&lt;/div&gt; &lt;div class=&quot;profile&quot;&gt; &lt;div class=&quot;avatar&quot;&gt; &lt;img src=&quot;images/avatar.jpg&quot; width=&quot;206&quot; height=&quot;206&quot; alt=&quot;avatar&quot;&gt; &lt;h3 class=&quot;name&quot;&gt;Nick&lt;/h3&gt; &lt;div class=&quot;title&quot;&gt;Becoming a Front-End Developer&lt;/div&gt; &lt;div class=&quot;social-media&quot;&gt; &lt;ul class=&quot;clearfix&quot;&gt; &lt;li&gt;&lt;a href=&quot;https://www.facebook.com/&quot; target=&quot;_blank&quot;&gt;&lt;i class=&quot;fa fa-facebook&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://github.com/&quot; target=&quot;_blank&quot;&gt;&lt;i class=&quot;fa fa-github&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://www.linkedin.com/&quot; target=&quot;_blank&quot;&gt;&lt;i class=&quot;fa fa-linkedin&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;self-intro&quot;&gt; &lt;h2&gt;Hello&lt;/h2&gt; &lt;div class=&quot;subtitle&quot;&gt; Looking for my next opportunity to make a change. &lt;/div&gt; &lt;p&gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Aspernatur nihil quam cupiditate labore totam nostrum dolor, neque voluptatibus cum accusamus.&lt;/p&gt; &lt;/div&gt;&lt;/div&gt; CSS 部分 12345678910111213141516171819202122232425262728293031323334#content&gt;.container { display: flex; width: 1170px; margin: auto;}.profile { width: 365px; position: relative; top: 33px; left: -25%;}.avatar { display: flex; flex-direction: column; align-items: center; width: 350px; height: 404px; background-color: #F2ECE8; padding-top: 30px; box-shadow: 5px 5px 50px #F2ECE8;}.self-intro { width: 45%; position: relative; left: -17em;}.avatar img { border: 1px solid transparent; border-radius: 50%;} About 個人學經歷區塊是鏡像對稱的兩個區塊，在區塊裡包含了時間、標題以及敘述，外邊加上陰影的效果。 HTML 架構 1234567891011121314151617181920212223&lt;div class=&quot;row&quot;&gt; &lt;div class=&quot;education&quot;&gt; &lt;h3 class=&quot;title&quot;&gt;Education&lt;/h3&gt; &lt;div class=&quot;timeline&quot;&gt; &lt;div class=&quot;timeline-item&quot;&gt; &lt;h6 class=&quot;date&quot;&gt; &lt;i class=&quot;fa fa-calendar&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; 2013 - 2015 &lt;/h6&gt; &lt;h4 class=&quot;title&quot;&gt;Master In Computer Science&lt;/h4&gt; &lt;p class=&quot;text&quot;&gt;Lorem, ipsum dolor sit amet consectetur adipisicing elit. Adipisci vero commodi reiciendis in rerum accusantium fugit vel nesciunt quos reprehenderit?&lt;/p&gt; &lt;h6 class=&quot;date&quot;&gt; &lt;i class=&quot;fa fa-calendar&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; 2011 - 2013 &lt;/h6&gt; &lt;h4 class=&quot;title&quot;&gt;Studie At delhi university&lt;/h4&gt; &lt;p class=&quot;text&quot;&gt;Lorem, ipsum dolor sit amet consectetur adipisicing elit. Adipisci vero commodi reiciendis in rerum accusantium fugit vel nesciunt quos reprehenderit?&lt;/p&gt; &lt;h6 class=&quot;date&quot;&gt; &lt;i class=&quot;fa fa-calendar&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; 2008 - 2011 &lt;/h6&gt; &lt;h4 class=&quot;title&quot;&gt;Bachelor Degree&lt;/h4&gt; &lt;p class=&quot;text&quot;&gt;Lorem, ipsum dolor sit amet consectetur adipisicing elit. Adipisci vero commodi reiciendis in rerum accusantium fugit vel nesciunt quos reprehenderit?&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; CSS 部分 1234567891011121314151617.education { display: flex; flex-direction: column; width: 50%; margin-top: 30px; padding: 50px 20px;}.timeline { background: #fff; padding: 30px 15px; border: 1px solid #0000002c; border-radius: 10px; width: 100%; position: relative; box-shadow: 0px 0px 18px 0 #0000002c;} Portfolio 個人作品集使用交錯排版方式，一邊是作品的縮圖，另一邊說明作品，敘述欄加入了交錯的透明背景色。 HTML 架構 1234567891011121314151617181920&lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;portfolio&quot;&gt; &lt;div class=&quot;thumbnail&quot;&gt; &lt;img src=&quot;https://picsum.photos/600/350?random=10&quot; alt=&quot;portfolio&quot;&gt; &lt;/div&gt; &lt;div class=&quot;portfolio-info&quot;&gt; &lt;h2 class=&quot;title&quot;&gt;portfolio&lt;/h2&gt; &lt;p class=&quot;intro&quot;&gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Corporis, odit.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;portfolio&quot;&gt; &lt;div class=&quot;portfolio-info&quot;&gt; &lt;h2 class=&quot;title&quot;&gt;portfolio&lt;/h2&gt; &lt;p class=&quot;intro&quot;&gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Corporis, odit.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;thumbnail&quot;&gt; &lt;img src=&quot;https://picsum.photos/600/350?random=10&quot; alt=&quot;portfolio&quot;&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt; CSS 部分 12345678910111213141516171819202122232425262728293031323334.portfolio { display: flex; align-items: center; margin-bottom: 70px;}.portfolio .thumbnail { width: 55%; flex-shrink: 0;}.portfolio .thumbnail img { width: 100%; vertical-align: middle;}.portfolio-info { width: 55%; flex-shrink: 0; padding: 50px 30px; position: relative; z-index: 1;}.portfolio&gt; :first-child { margin-right: -10%;}.portfolio:nth-child(2n+1) .portfolio-info { background-color: rgba(242, 236, 232, .8);}.portfolio:nth-child(2n) .portfolio-info { background-color: rgba(223, 225, 229, .8);} Contact Contact 部分是三個區塊分別代表三種聯絡方式，用 icon 加入標題和文字來呈現。 12345678910111213141516&lt;div class=&quot;container&quot;&gt; &lt;h2 class=&quot;catagory&quot;&gt;contact &amp;thinsp; &lt;em&gt;info&lt;/em&gt;&lt;/h2&gt; &lt;div class=&quot;contact method&quot;&gt; &lt;div class=&quot;contact-way&quot;&gt; &lt;div class=&quot;icon&quot;&gt; &lt;img src=&quot;https://img.icons8.com/bubbles/100/000000/cell-phone.png &quot; alt=&quot;phone&quot;&gt; &lt;/div&gt; &lt;div class=&quot;contact-info&quot;&gt; &lt;h1&gt;Phone&lt;/h1&gt; &lt;p&gt;TEL: +8862 1234-5678&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;contact-way&quot;&gt;..&lt;/div&gt; &lt;div class=&quot;contact-way&quot;&gt;..&lt;/div&gt; &lt;/div&gt;&lt;/div&gt; CSS 部分 1234567891011121314151617181920212223.contact.method { display: flex; width: 100%; flex-direction: row; justify-content: space-evenly; padding: 100px 0;}.contact-way { display: flex; width: 30%; margin: 0; padding: 30px; flex-direction: row; border-radius: 10px; box-shadow: 0px 0px 18px 0 #0000002c; transition: box-shadow .3s ease;}.contact-way:hover { box-shadow: 0px 0px 5px 0 #0000002c;}","link":"/2020/11/26/Personal-Resume/"},{"title":"[手刻切版] - RootsSkate","text":"這是第一個練習切版的網頁，版面配置參考不少網站後自己編排，排版方面都使用 float 進行排版。 DemoRootsSkate Intro 網頁介紹這是一個滑板的購物網站，總共有三個頁面：Home、About、Contact，每個頁面都在右下角有快速返回首頁的按鈕設計。 Home：基本 logo 圖、navbar，首圖和標語，接著是商品的資訊，最後則是 footer 以及社群 icon。 About：相同的 logo 圖、 navbar 以及 footer，接著是頁面的首圖與標語、品牌的介紹，人物介紹帶有簡易的動畫以及社群的功能。 Contact：相同的 logo 圖、 navbar 以及 footer，首圖部分則是利用 iframe 嵌入 google 地圖，側邊是關於商店的聯絡資訊以及營業時間，form 表單包含四個 input 一個 textarea，搭配一個 submit 的按鈕。 Layout Notes一開始需要先做 reset 的動作，可以在 CSS 設定或是直接引入 normalize.css 檔案來幫我們做 reset 的動作。 box-sizing: border-box; 這個設定是讓 padding 以及 border 的修改不會改變到 box model 的大小。 首先我們會做一些全域的設定，像是字型、大小、渲染時的平滑效果以及 ul 的設定。 123456789101112131415161718* { -webkit-box-sizing: border-box; box-sizing: border-box;}body { font-family: 'Source Sans Pro', sans-serif; font-size: 15px; font-weight: 400; -webkit-font-smoothing: antialiased; -moz-font-smoothing: antialiased;}ul { margin: 0; padding-left: 0; list-style-type: none;} Home 這邊要處理的分別是 logo 圖跟我們的 navbar，圖片的高度跟我們的 navbar 高度一樣而不會超出，另一邊用 ul 包住 li 當作 navbar 的選單，並增加改變顏色的效果，因為使用 float 排版，要分別設定圖片跟 navbar 的浮動方向。 HTML 架構 123456789101112131415&lt;div id=&quot;header&quot;&gt; &lt;div class=&quot;container clearfix&quot;&gt; &lt;div id=&quot;logo&quot;&gt; &lt;img src=&quot;images/ms-icon-144x144.png&quot; width=&quot;112&quot; height=&quot;100&quot; alt=&quot;Skater&quot;&gt; &lt;/div&gt; &lt;div id=&quot;nav&quot;&gt; &lt;ul class=&quot;clearfix&quot;&gt; &lt;li&gt;&lt;a href=&quot;index.html&quot;&gt;home&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;about.html&quot;&gt;about&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;contact.html&quot;&gt;contact&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;&lt;i class=&quot;icon-basket&quot;&gt;&lt;/i&gt;cart&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt; CSS 部分 123456789101112131415161718192021222324#logo { float: left;}#nav { float: right; text-transform: uppercase; line-height: 100px;}#nav li { float: left;}#nav a { padding: 0 12px; color: #333; text-decoration: none; font-size: 14px;}#nav a:hover { color: #d6b161;} 首圖是用整個區塊的背景圖片呈現，加上 h1 標題。 HTML 架構 12345&lt;div class=&quot;slider&quot;&gt; &lt;span&gt; &lt;h1&gt;explore &amp;emsp; dare &amp;emsp; wonder&lt;/h1&gt; &lt;/span&gt;&lt;/div&gt; CSS 部分 123456789101112131415161718slider { background-image: url(../images/cover.jpg); background-size: cover; background-position: 50% 50%; background-repeat: no-repeat; width: 100%; height: 550px; position: relative;}.slider span { position: absolute; margin: 0 auto; top: 56%; left: 28.5%; transform: translateY(-50%);} 商品的 showcase 和首圖概念一樣，用區塊的背景圖片去呈現，為了給左邊留白寬度沒有設定 100%，標題文字則用兩種顏色呈現，加入一個 a 連結的 button，並做了改變顏色的動畫。 HTML 架構 1234567&lt;div class=&quot;new-collection&quot;&gt; &lt;div class=&quot;container clearfix&quot;&gt; &lt;div class=&quot;title&quot;&gt;&lt;span class=&quot;golden-title&quot;&gt;new&lt;/span&gt;&lt;br&gt;colle-&lt;br&gt;ction&lt;/div&gt; &lt;a href=&quot;shop.html&quot; class=&quot;button link&quot;&gt;see all&lt;/a&gt; &lt;div class=&quot;background&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; CSS 部分 123456789101112131415161718192021222324252627282930313233343536373839.background { background-image: url(../images/collection.jpg); background-size: cover; background-position: 50% 100%; width: 89%; height: 450px; float: right; margin-top: -107px;}.new-collection .title { position: absolute; top: 120px; font-size: 70px; font-weight: bold; color: #000; text-transform: uppercase; letter-spacing: 15px; float: left;}.new-collection .golden-title { color: #d6b161;}.button.link { position: relative; top: 240px; padding: 15px 60px; background: #000; color: #fff; -webkit-transition: 0.2s linear all; transition: 0.2s linear all;}.button.link:hover { background: #d6b161; color: #fff;} 商品區塊分為三個欄位，排版上設定 float:left width:33.3%，內容則加入商品圖片、商品標題跟價格。 HTML 架構 123456789101112131415&lt;div class=&quot;products&quot;&gt; &lt;ul class=&quot;clearfix row&quot;&gt; &lt;li class=&quot;col-4 product&quot;&gt; &lt;div class=&quot;thumbnail&quot;&gt; &lt;img src=&quot;images/product-1.jpg&quot; alt=&quot;product&quot;&gt; &lt;/div&gt; &lt;div class=&quot;info&quot;&gt; &lt;h3 class=&quot;title&quot;&gt; &lt;a href=&quot;#&quot;&gt;World Industries Skateboard Graffiti&lt;/a&gt; &lt;/h3&gt; &lt;div class=&quot;price&quot;&gt;$149.99&lt;/div&gt; &lt;/div&gt; &lt;/li&gt; &lt;/ul&gt;&lt;/div&gt; CSS 部分 1234.col-4 { float: left; width: 33.3333333%;} footer 分為左邊的 copyright 以及右邊的社群連結，一樣要分別設定個別的浮動方向。 社群連結是利用在 a 連結裡面放入圖片的方式呈現，在 css 方面設定 display:inline-blick 讓我們設定 width 跟 height 屬性。 HTML 架構 12345678910111213141516171819202122232425262728&lt;div id=&quot;footer&quot;&gt; &lt;div class=&quot;container clearfix&quot;&gt; &lt;div class=&quot;copyright&quot;&gt; &lt;div class=&quot;title&quot;&gt;Copyright &amp;copy; Just Skate 2020&lt;/div&gt; &lt;div class=&quot;subtitle&quot;&gt;Trademarks belong to their respective owners. All rights reserved.&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;social-media&quot;&gt; &lt;ul class=&quot;clearfix&quot;&gt; &lt;li&gt; &lt;a href=&quot;https://www.facebook.com/&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;images/social-facebook.png&quot; alt=&quot;facebook&quot;&gt; &lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;https://twitter.com/?lang=en&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;images/social-twitter.png&quot; alt=&quot;twitter&quot;&gt; &lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;https://www.instagram.com/&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;images/social-instagram.png&quot; alt=&quot;instagram&quot;&gt; &lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt; CSS 部分 123456789101112131415161718192021#footer .copyright { float: left;}#footer .social-media { float: right;}#footer .social-media li { float: left;}#footer .social-media a { display: inline-block; margin: 10px; width: auto; height: 20px; line-height: 20px; text-align: center; text-decoration: none;} About About 頁面的首圖跟標語跟首頁一樣，用整個區塊的背景圖片呈現，加上 h1 標題。 HTML 架構 12345&lt;div class=&quot;header&quot;&gt; &lt;div class=&quot;container&quot;&gt; &lt;h1 class=&quot;title&quot;&gt;our story&lt;/h1&gt; &lt;/div&gt;&lt;/div&gt; CSS 部分 123456789101112131415#content .header { padding: 200px 0; background-image: url(../images/about.jpg); background-size: cover; background-position: 50% 31%;}#content .header .title { float: left; margin: 0; color: #fff; text-transform: uppercase; font-weight: bold; letter-spacing: 2px; font-size: 24px;} 成員介紹分為標題 h2、敘述 p 以及下方的成員欄位，當滑鼠移到成員欄位時會有上移以及變色的效果。 HTML 架構 ( 這邊和首頁商品架構類似，只說明動畫部分 ) 12345678910111213141516&lt;div class=&quot;wrap&quot;&gt; &lt;div class=&quot;avatar&quot;&gt; &lt;img src=&quot;images/member-1.jpg&quot; alt=&quot;avatar&quot;&gt; &lt;/div&gt; &lt;div class=&quot;info&quot;&gt; &lt;h3 class=&quot;name&quot;&gt;Benjamin Parker&lt;/h3&gt; &lt;div class=&quot;title&quot;&gt;CEO &amp; Co-Founder&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;social-media&quot;&gt; &lt;ul class=&quot;clearfix&quot;&gt; &lt;li&gt;&lt;a href=&quot;https://www.facebook.com/&quot; target=&quot;_blank&quot;&gt;&lt;i class=&quot;icon-facebook&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://twitter.com/?lang=en&quot; target=&quot;_blank&quot;&gt;&lt;i class=&quot;icon-twitter&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://www.linkedin.com/&quot; target=&quot;_blank&quot;&gt;&lt;i class=&quot;icon-linkedin&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;&lt;/div&gt; CSS 動畫部分 12345678910111213141516171819.about #content .member:hover .title { color: #fff;}.about #content .member:hover a { color: #fff;}.col-4.member { transform: translateY(0px); transition: .5s;}.col-4.member:hover { transform: translateY(-40px);}.col-4.member:hover .wrap { background-image: linear-gradient(0deg, #d6b161, #fff);} Contact Contact 頁面把首圖換成了 google map，主要是用 iframe 這個標籤來呈現，詳細使用方式可以參考網站嵌入google map技術，並給予高度跟寬度來調整呈現的樣子。 12&lt;iframe src=&quot;https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3614.9390098163053!2d121.56572361500625!3d25.03614378397135!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x3442ab43ab5a86c1%3A0x400f5859b70ce0b7!2zMTEw5Y-w5YyX5biC5L-h576p5Y2A5p2-5aO96LevMTPomZ8!5e0!3m2!1szh-TW!2stw!4v1573633685991!5m2!1szh-TW!2stw&quot; width=&quot;100%&quot; height=&quot;450&quot; frameborder=&quot;0&quot; style=&quot;border:0&quot; allowfullscreen&gt;&lt;/iframe&gt; 下方分為兩個區塊，分別是商店資訊區塊以及表單的區塊，文字部分是 h3 標題搭配 p 敘述，表單每個 div 都有 label input，在 Name 跟 Email 多加 required 要求一定要輸入相關資訊，寬度給予 100% 並加上 border。 HTML 架構：商店資訊 123456789101112&lt;div class=&quot;row&quot;&gt; &lt;div class=&quot;col-4 office-info&quot;&gt; &lt;h3 class=&quot;title&quot;&gt;our store&lt;/h3&gt; &lt;div class=&quot;contact-info&quot;&gt; &lt;p class=&quot;address&quot;&gt;No. 13, Songshou Rd., Xinyi Dist., Taipei City 110, Taiwan (R.O.C.)&lt;/p&gt; &lt;div class=&quot;info&quot;&gt;以下省略&lt;/div&gt; &lt;h3 class=&quot;title&quot;&gt;opening hour&lt;/h3&gt; &lt;div class=&quot;contact-info&quot;&gt; &lt;div class=&quot;weekday&quot;&gt;Monday - Friday: 11:00 - 19:30&lt;/div&gt; &lt;div class=&quot;holiday&quot;&gt;Saturday - Sunday: 11:00 - 20:00&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; HTML 架構：表單部分 1234567891011121314151617181920&lt;div class=&quot;col-8 question&quot;&gt; &lt;h3 class=&quot;title&quot;&gt;have questions?&lt;/h3&gt; &lt;p&gt;Please fill in the fields below: * = Required&lt;br&gt;We'll get back to you within 48-72 hrs.&lt;/p&gt; &lt;form action=&quot;#&quot; class=&quot;contact-form&quot; method=&quot;post&quot;&gt; &lt;div class=&quot;row&quot;&gt; &lt;div class=&quot;col-6&quot;&gt; &lt;label for=&quot;name&quot;&gt;name *&lt;/label&gt; &lt;input type=&quot;text&quot; name=&quot;name&quot; id=&quot;name&quot; required&gt; &lt;/div&gt; &lt;div class=&quot;col-6&quot;&gt; &lt;label for=&quot;email&quot;&gt;email *&lt;/label&gt; &lt;input type=&quot;text&quot; name=&quot;email&quot; id=&quot;email&quot; required&gt; &lt;div class=&quot;col-6&quot;&gt;以下省略&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;col-12&quot;&gt; &lt;label for=&quot;comments&quot;&gt;comments&lt;/label&gt; &lt;textarea name=&quot;comments&quot; id=&quot;comments&quot;&gt;&lt;/textarea&gt; &lt;/div&gt; &lt;/form&gt;&lt;/div&gt; CSS 表單部分 123456.contact-form input,.contact-form textarea { padding: 6px 12px; border: 1px solid #e5e5e5; width: 100%;} Go top Go-top 快速回到首頁按鈕，用 a 連結回到 #header 加上 icon 圖示呈現，position:fixed 的元素會相對於瀏覽器視窗來定位，即便頁面捲動，還是會固定在相同的位置。 1&lt;a href=&quot;#header&quot; id=&quot;go-top&quot;&gt;&lt;i class=&quot;icon-go-top&quot;&gt;&lt;/i&gt;&lt;/a&gt; 123456789101112#go-top { position: fixed; right: 20px; bottom: 35px; width: 40px; height: 40px; background: rgba(0, 0, 0, .6); color: #fff; text-align: center; line-height: 40px; text-decoration: none;}","link":"/2020/11/25/RootsSkate/"},{"title":"shell環境安裝","text":"WSL 是什麼？Ｗindows Subsystem for Linux，簡稱 WSL，適用於 Linux 的 Windows 子系統，可在 Windows 上執行 Linux 環境。 安裝 WSLStep 1 - 啟用 WSL以系統管理員身分開啟 PowerShell 執行下面這段 1dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart 確認執行完出現下列畫面 Step 2 - 更新至 WSL2先確認您的版本及組件號碼是否符合以下條件 Windows 標誌鍵 + R，輸入 winver 確認版本 X64 系統： 版本 1903 或更高版本，含組建 18362 或更高組建。 ARM64 系統： 版本 2004 或更高版本，含組建 19041 或更高組建。 低於 18362 的組建不支援 WSL 2。 使用 Windows 更新小幫手來更新您的 Windows 版本。 Step 3 - 啟用虛擬機功能一樣以系統管理員身分開啟 PowerShell 並執行： 1dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart 確認執行完出現下列畫面 重新啟動電腦已完成 WSL並更新至 WSL2 Step 4 - 下載 Linux 核心更新套件WSL2 Linx 更新套件 Step 5 - 將 WSL2 設為預設版本一樣以系統管理員身分開啟 PowerShell 並執行： 1wsl --set-default-version 2 這部分出現以下錯誤，不過不影響之後的安裝 12wsl : 無法辨識 'wsl' 詞彙是否為 Cmdlet、函數、指令檔或可執行程式的名稱。請檢查名稱拼字是否正確，如果包含路徑的話，請確認路徑是否正確，然後再試一次。 安裝 Linux 發行版本從 Microsoft Store 上選取一個 Linux 發行版本，第一次啟動時需要設定使用者帳戶和密碼 設定完成畫面，之後想要重設密碼或忘記的話可以參考 這邊 參考資料在 windows10 安裝 bash&amp; oh-my-zsh 為新的 Linux 發行版本建立使用者帳戶和密碼","link":"/2020/11/19/shell%E7%92%B0%E5%A2%83%E5%AE%89%E8%A3%9D/"},{"title":"[JavaScript] - Basic","text":"什麼是 JavaScript？ JavaScript是一門基於原型、函式先行的語言，支援物件導向設計 JavaScript 不是 Java，除了句法上有一些相似之處，JavaScript 和 Java 是完全不相干的 1995 年時，JavaScript 隨著 Netscape 2.0 首次推出，它原本要被命名為 LiveScript，但因為行銷策略為了強調昇陽的 Java 程式語言的普遍性，改名為 JavaScript，之後就造成了大家的混淆。 讓你在網頁中提供動態的功能，像是內容即時更新、影片播放、控制圖片等 瀏覽器唯一指定內建程式語言 概論以下引用自 Wikipedia 一般來說，完整的JavaScript包括以下幾個部分： ECMAScript，描述了該語言的語法和基本物件 文件物件模型（DOM），描述處理網頁內容的方法和介面 瀏覽器物件模型（BOM），描述與瀏覽器進行互動的方法和介面 JavaScript的基本特點如下： 是一種解釋性程式語言（代碼不進行預編譯） 主要用來向HTML頁面添加互動行為 可以直接嵌入HTML頁面，但寫成單獨的js檔案有利於結構和行為的分離 JavaScript常用來完成以下任務： 嵌入動態文字於HTML頁面 對瀏覽器事件作出回應 讀寫HTML元素 在資料被提交到伺服器之前驗證資料 檢測訪客的瀏覽器資訊 控制cookie，包括建立和修改等 語言特性 動態型別語言： 弱型別語言：不用特別宣告變數的型別，在運作時會自動轉換，比如直接將整數變數與字串變數相加 物件導向 Primitive Types Object Types HTTP 請求方法與 HTTP 動詞 用動詞標準化動作 (HTTP Method) GET POST DELETE PUT PATCH 用狀態碼標準化結果 (HTTP Status code) 1xx: 稍等 2xx: 成功 3xx: 重新導向 (301 永久導向、302 暫時導向、304 未修改) 4xx: Client 端錯誤 (404 拒絕存取、403 禁止使用、404 找不到) 5xx: Server 端錯誤 變數 (Variable)變數是用來儲存資料和進行運算的基本單位，在 JavaScript 中變數宣告有一定的規則，變數的第一個字母必須為英文字母、底線 _ 或是錢字號 $ ，後面可以是英文字母、底線 _ 或是錢字號 $ 以及數字。 變數名稱不可以是保留字 (Reserved Words) 與關鍵字 (keyword) 關鍵字指的是 ECMAScript 所規定具有特定用途的英文單字，不能用來作為變數名稱使用。 而保留字則是雖然目前在 JavaScript 還沒有特殊用途，但在未來有可能會被拿來當關鍵字來使用，所以也不能作為變數名稱。 MDN 關鍵字與保留字列表 資料型別 (Data types) 六種基本 (primitives) 資料型別 : Number : 整數或是帶有小數點的浮點數 特殊型 : Infinity、-Infinity、NaN (Not a Number) String : 字串，用一組 ' ' 或 &quot; &quot; 包住，不可混用，ES6 可以用 `` 來宣告 Boolean : true and false null : 表示空值的特殊值 undefined : 表示值還沒有定義或還未指定 Symbol : ES6 新語法，用來建立獨一無二的值 物件型別 (Object): 除基本型別外都是物件型別 可以透過 typeof 運算子來判斷型別 1234typeof true; // 'boolean'typeof '123'; // 'string'typeof 123; // 'number'typeof [ ]; // 'object' 浮點數的陷阱JavaScript 的 number 是基於「IEEE 754」二進位浮點數算術標準，所以當你執行 0.1 + 0.2 === 0.3 的時候，你會得到 false 的結果，不過執行 0.2 + 0.3 === 0.5 會得到 true的結果。 因為十進位的小數無法完美的用二進位的方式表示，只能用無限循環的位數來趨近於十進位的小數，若以 IEEE 754 規定的 24 位數為上限時，在儲存時就會省略一些位數，導致還原時的小數不夠精準。 運算式與運算子 (Expression &amp; Operator)JavaScript 的語法基本上可以分為兩大類，「敘述句 (Statement)」 與 「運算式 (Expression)」 敘述句 (Statement)：簡單來說就是執行某個動作。像是變數的宣告、賦值，迴圈和 if 判斷式等等都可以被歸類於此。 1var a; 運算式 (Expression)：而運算式最大的特性，就是它會產生一個「值」。像是我們在呼叫 function 時的參數 (arguments)，或者透過 = 賦值時，在 = 「右側」的部分都屬於運算式的部分。 1var a = 10 * 10; = 右側的 10 * 10 就是運算式，而 10 則為運算元 運算子 (Operators) *算術運算子 (Arithmetic Operators)**：以數值 ( 文字或變數也可以 )作為其運算元，並回傳單一數值。最常見的算術運算元是 加法 (+)，減法 (-)， 乘法 ()，及除法 (/)。 **賦值運算子 (Assignment Operators)**：將基於其右方的運算元的值賦予其左方的運算元。 利用 ||= 給預設值 123var a;a ||= 10;console.log('預設值是:', a); **比較運算子 (Comparison Operators)**：會比較運算元並基於比較的結果回傳邏輯值。 運算元可以是數字，字串，邏輯，或物件的值。當兩個運算元不具有相同型態， JavaScript 會嘗試將它們轉換成相同型態。通常是將運算元以數學形式對待。 **邏輯運算子 (Logical Operator)**：使用於布林值時，會回傳布林型態的值。 然而 &amp;&amp; 和 || 運算子實際上是回傳兩指定運算元之一，因此用於非布林型態值時，它可能會回傳一個非布林型態的值。 &amp;&amp; (AND) : 假如運算式1可以被轉換成 false 的話，回傳運算式1; 否則回傳運算式2。 只有在兩個運算元都是true 時才會回傳 true，否則回傳 false || (OR) : 假如運算式1可以被轉換成 true 的話，回傳運算式1; 否則回傳運算式2。 || 在兩個運算元有任一個是 true 時就會回傳 true，否則回傳 false ! (NOT) : 假如單一個運算元能被轉換成 true 時，回傳 false ， 不然回傳 true 三元運算子 Conditional (ternary) operator condition ? exprIfTrue : exprIfFalse condition : 用來作為條件的表達式 exprIfTrue : 如果 condition 的值是 true ， exprIfTrue 會被執行 exprIfFalse : 如果 condition 的值是 false ， exprIfFalse 會被執行 123var age = 26;var beverage = (age &gt;= 21) ? &quot;Beer&quot; : &quot;Juice&quot;;console.log(beverage); // &quot;Beer&quot; 控制流程if 判斷式語法 12345if (條件式) { 陳述式1} else { 陳述式2} 當條件成立(為 true )的時候會執行 if 陳述式裡的程式，而不成立時則執行另外一個陳述式。 以下轉換成布林值時為 false false undefined null 0 NaN “” ( 完全沒內容的空字串，只有一個空格也是真值) 使用 if…else 1234567let numA = 5;let numB = 6;if (numA === numB) { console.log('A等於B'); //不成立 不印} else { console.log('A不等於B'); //印出 A不等於B} 使用 else if 123456789let numA = 5;let numB = 6;if (numA === numB) { console.log('A等於B'); //不成立 不印} else if (numA &gt; numB) { console.log('A大於B'); //不成立 不印} else { console.log('A小於B'); //印出 A小於B switch語法 12345678910111213141516171819switch (表達式) { case value1: //當表達式的值符合 value1 //要執行的陳述句 break; case value2: //當表達式的值符合 value2 //要執行的陳述句 break; ... case valueN: //當表達式的值符合 valueN //要執行的陳述句 break; default: //當表達式的值都不符合上述條件 //要執行的陳述句 break;} 範例： 1234567891011121314151617181920212223var expr = 'Cherries';switch (expr) { case 'Oranges': console.log('Oranges are $0.59 a pound.'); break; case 'Apples': console.log('Apples are $0.32 a pound.'); break; case 'Bananas': console.log('Bananas are $0.48 a pound.'); break; case 'Cherries': console.log('Cherries are $3.00 a pound.'); break; case 'Mangoes': case 'Papayas': console.log('Mangoes and papayas are $2.79 a pound.'); break; default: console.log('Sorry, we are out of ' + expr + '.');}console.log(&quot;Is there anything else you'd like?&quot;); 忘記 break 時會發生什麼事 當 JavaScript 執行到 break 時，會跳出整個 switch 區塊，繼續往下執行。而如果沒有 break 則程式會從符合的 case 區塊開始，一路往下執行到遇到 break 為止。 範例： 1234567891011121314151617var foo = 0;switch (foo) { case -1: console.log('negative 1'); break; case 0: // foo is 0 so criteria met here so this block will run console.log(0); // NOTE: the forgotten break would have been here case 1: // no break statement in 'case 0:' so this case will run as well console.log(1); break; // it encounters this break so will not continue into 'case 2:' case 2: console.log(2); break; default: console.log('default');} for 迴圈語法 123for ([初始表達式]; [條件式]; [遞增表達式]) { 陳述句} 範例：從 1 數到 10 123for (var i = 1; i &lt;=10; i++) { console.log(i);} while 迴圈語法 123while (條件式) { 陳述句} 用 while 改寫 for 迴圈的範例 123456var i = 1;while ( i &lt;= 10 ){ console.log( i ); i++;} do while 迴圈先執行一次，再判斷要不要繼續執行 語法 1234do { 陳述句}while (條件式) 範例： 123456var i = 1;do { console.log( i ); i++;}while ( i &lt;= 10 ) break 與 continuebreak 會直接跳離迴圈 範例：從 1 數到 10，數到 4 就不想數了 12345for (var i = 1; i &lt;=10; i++) { console.log(i); if(i === 4) break;} continue 會跳過一次，然後繼續下一次迴圈 範例：從 1 數到 10，跳過 4 不數 12345for (var i = 1; i &lt;=10; i++) { if(i === 4) continue; console.log(i);} 函式 (Function) Don’t Repeat Yourself, DRY 函式是將一段或多段程式指令包裝起來重複使用，也方便維護。 Function 是 JavaScript 的一級物件(first class object)，可以當作別的函數的參數或作為一個變數的值。 定義函式的方式語法 123function 名稱 (參數) { // 要執行的功能} 一個函式的定義是由一系列的函式關鍵詞組成，分別為: 函式的名稱 包在()中的函式參數列表，參數與參數之間用逗號隔開 包在{}中用於定義函式功能的區塊 函式宣告 (Function Declaration)123function square (number) { return number * number; }; 函式表達式 (Function Expressions)將一個函式透過 = 指定給某個變數 123var squre = function (number) { return number * number;}; new Function 關鍵字建立函式作用域 (Scope)在 ES6 以前，只有函式能建立範疇，而在 ES6 之後，可用大括號 { ... } 定義區塊範疇，讓 const 和 let 宣告以區塊為範疇的變數。 範例：區域變數 12345678910111213141516function exampleFunction() { var x = &quot;declared inside function&quot;; // x 只能在 exampleFunction 函数中使用 console.log(&quot;Inside function&quot;); console.log(x);}exampleFunction();console.log(x); // 找不到 x 變數/*執行結果&quot;Inside function&quot;&quot;declared inside function&quot;x is not defined */ 範例：全域變數 12345678910111213141516171819var x = &quot;declared outside function&quot;;exampleFunction();function exampleFunction() { console.log(&quot;Inside function&quot;); console.log(x); // 內部找不到 x 會往外找}console.log(&quot;Outside function&quot;);console.log(x);/*執行結果&quot;Inside function&quot;&quot;declared inside function&quot;&quot;Outside function&quot;&quot;declared outside function&quot;*/ 提升 (Hoisting)變數和函式的宣告會在編譯階段就被先建立一個記憶體空間，等到實際執行時再將值放入記憶體空間內。 ES6 透過 let 宣告的變數不會有變數提升的效果。 範例：變數的提升 1234567891011console.log(x); // undefinedvar x = 10; console.log(x); // 10/* 實際運行順序var x;console.log(x);x = 10;console.log(x);*/ 範例：函式的提升 12345catName(&quot;Chloe&quot;); // &quot;My cat's name is Chloe&quot;function catName(name) { console.log(&quot;My cat's name is &quot; + name);} 回呼函式 (Callback Function)把函式當作另一個函式的參數，透過另一個函式來呼叫它 範例: 12345678910function greeting(name) { alert('Hello ' + name);}function processUserInput(callback) { var name = prompt('輸入你的名字：'); callback(name);}processUserInput(greeting); IIFE 函式 (Immediately Invoked Function Expression)用 function expression 的方式建立函式後並立即執行它 範例: 123var sayHi = function(name) { console.log('Hi, ' + name);}('Nick') 不用建立變數的寫法: 123(function(name) { console.log('Hi, ' + name);})('Nick') 物件 (Object)一個物件可以是零至多種屬性的集合，而屬性是鍵 (key) 與值 (value) 之間的關聯。一個屬性可以是基本型別、物件或是函式。 123456789var person = { name : ['Bob', 'Smith'], age : 32, gender : 'male', interests : ['music', 'skiing'], greeting: function() { alert('Hi! I\\'m ' + this.name[0] + '.'); }}; 物件的建立 透過 new 關鍵字建立，再一一新增其屬性 123456789var person = new Object();person.name = 'Bob';person.age = 32;person.gender = 'male';person.interests = ['music', 'skiing'];person.greeting = function() { alert('Hi! I\\'m ' + this.name[0] + '.');} 使用大括號 { } 建立 使用大括號 { } 建立，並在建立的同時直接指定屬性至物件內，這種建立物件的方式稱為物件實字 (Object Literal) 123456789var person = { name : 'Bob', age : 32, gender : 'male', interests : ['music', 'skiing'], greeting: function() { alert('Hi! I\\'m ' + this.name[0] + '.'); }}; 物件屬性的存取 透過 . 進行存取 123456789101112var person = { name : 'Bob', age : 32, gender : 'male', interests : ['music', 'skiing'], greeting: function() { alert('Hi! I\\'m ' + this.name[0] + '.'); }};person.name; // 'Bob'person.age; // 32 透過 中括號 [ ] 進行存取 123456789101112var person = { name : 'Bob', age : 32, gender : 'male', interests : ['music', 'skiing'], greeting: function() { alert('Hi! I\\'m ' + this.name[0] + '.'); }};person[&quot;name&quot;]; // 'Bob'person[&quot;age&quot;]; // 32 屬性刪除透過 delete 關鍵字來刪除 12345678910111213var person = { name : 'Bob', age : 32, gender : 'male', interests : ['music', 'skiing'], greeting: function() { alert('Hi! I\\'m ' + this.name[0] + '.'); }};delete person.name;person.name; // undefined 陣列 (Array)陣列是一種有順序的複合式的資料結構，陣列中可以存放任何值，數字、字串、其他陣列、函式等 陣列的建立語法 1var arrayName = [item1, item2, ...]; 範例： 1var fruits = ['Apple', 'Banana']; 陣列的操作取得陣列的長度123var fruits = ['Apple', 'Banana'];console.log(fruits.length); // 2 取得元素的索引123var fruits = ['Apple', 'Banana'];console.log(fruits.indexOf('Apple')); // 0 讀取陣列中的元素12345var fruits = ['Apple', 'Banana'];var first = fruits[0]; // Applevar last = fruits[fruits.length - 1]; // Banana 更改陣列中的值123456var fruits = ['Apple', 'Banana'];fruits[0] = 'Orange';fruits[1] = 123;console.log(fruits); // [&quot;Orange&quot;, 123] 新增元素 用 push() 新增元素到陣列最後面12345var fruits = ['Apple', 'Banana'];fruits.push('Orange');console.log(fruits); // [&quot;Apple&quot;, &quot;Banana&quot;, &quot;Orange&quot;] 用 unshift() 新增元素到陣列最前面 12345var fruits = ['Apple', 'Banana'];fruits.unshift('Orange');console.log(fruits); // [&quot;Orange&quot;, &quot;Apple&quot;, &quot;Banana&quot;] 刪除元素 用 pop() 移除陣列中最後一個元素pop() 除了移除元素，還會返回移除的元素值 12345var fruits = ['Apple', 'Banana'];var last = fruits.pop(); // Banana console.log(fruits); // [&quot;Apple&quot;] 用 shift() 移除陣列中第一個元素 12345var fruits = ['Apple', 'Banana'];var first = fruits.shift(); // Appleconsole.log(fruits); // [&quot;Banana&quot;] 擷取陣列中的元素語法 1ary.slice(begin, end) begin 表示開始擷取的索引位置 end 表示結束擷取的索引位置，擷取的範圍不包含 end 元素，如果 end 是負數，表示從陣列後面算起，例如 -1 表示最後一個元素的位置 範例： 123456789var fruits = [ 'Apple', 'Banana', 'Orange', 'Lemon', 'Mango'];var foo1 = fruits.slice(1, 3);console.log(foo1); // [&quot;Banana&quot;, &quot;Orange&quot;]var foo2 = fruits.slice(2, -1);console.log(foo2); // [&quot;Orange&quot;, &quot;Lemon&quot;] 參考資料 MDN JavaScript","link":"/2020/12/13/JavaScript-Basic/"}],"tags":[{"name":"Linux","slug":"Linux","link":"/tags/Linux/"},{"name":"Command Line","slug":"Command-Line","link":"/tags/Command-Line/"},{"name":"HEXO BLOG","slug":"HEXO-BLOG","link":"/tags/HEXO-BLOG/"},{"name":"JavaScript","slug":"JavaScript","link":"/tags/JavaScript/"},{"name":"Git","slug":"Git","link":"/tags/Git/"},{"name":"GitHub","slug":"GitHub","link":"/tags/GitHub/"},{"name":"Markdown","slug":"Markdown","link":"/tags/Markdown/"},{"name":"HTML","slug":"HTML","link":"/tags/HTML/"},{"name":"CSS","slug":"CSS","link":"/tags/CSS/"},{"name":"WSL","slug":"WSL","link":"/tags/WSL/"}],"categories":[]}